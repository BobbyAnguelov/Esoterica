#pragma once

#include "Applications/Editor/EditorUI.h"
#include "Engine.h"
#include "Win32/Application_Win32.h"

#include "_AutoGenerated/ToolsTypeRegistration.h"

//-------------------------------------------------------------------------

namespace EE
{
    class EditorEngine final : public Engine
    {
        friend class EditorApplication;

    public:

        EditorEngine( TFunction<bool( EE::String const& error )>&& errorHandler );

        virtual void RegisterTypes() override
        {
            AutoGenerated::Tools::RegisterTypes( *m_pTypeRegistry );
        }

        virtual void UnregisterTypes() override
        {
            AutoGenerated::Tools::UnregisterTypes( *m_pTypeRegistry );
        }

        virtual void CreateToolsUI();

    private:

        ResourceID                      m_editorStartupMap;
    };

    //-------------------------------------------------------------------------

    class EditorApplication final : public Win32Application
    {

    public:

        EditorApplication( HINSTANCE hInstance );

    private:

        virtual bool ProcessCommandline( int32_t argc, char** argv ) override;
        virtual bool Initialize() override;
        virtual bool Shutdown() override;

        virtual LRESULT WndProcess( HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam );

        virtual bool ApplicationLoop() override;

    private:

        EditorEngine                    m_editorEngine;
    };
}