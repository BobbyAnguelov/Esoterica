#include "System/TypeSystem/TypeRegistry.h"
#include "System/Application/ApplicationGlobalState.h"
#include "System/FileSystem/FileSystem.h"
#include "System/Serialization/BinarySerialization.h"
#include "System/Math/NumericRange.h"
#include "System/Types/Event.h"

#include "_AutoGenerated/ToolsTypeRegistration.h"

#include <iostream>
#include "System/Network/IPC/IPCMessage.h"

//-------------------------------------------------------------------------

using namespace EE;
using namespace EE::Physics;

//-------------------------------------------------------------------------

struct Foo
{
    EE_SERIALIZE( boo, a, b, c, d );

    void Reset()
    {
        boo = false;
        a = 0;
        b = 0;
        c = 0;
        d = 0;
    }

    bool boo = true;
    int8_t a = 0;
    int16_t b = 1;
    int32_t c = 2;
    int64_t d = 3;
};

struct Bar : public Foo
{
    EE_SERIALIZE( EE_SERIALIZE_BASE( Foo ), e, f, g, h );

    void Reset()
    {
        Foo::Reset();

        e = 0;
        f = 0;
        g = 0;
        h = 0;
    }

    uint8_t e = 4;
    uint16_t f = 5;
    uint32_t g = 6;
    uint64_t h = 7;
};

struct Wah : public Bar
{
    EE_SERIALIZE( EE_SERIALIZE_BASE( Bar ), i, j, k, l, m, n, o, p, q, blob, id );

    void Reset()
    {
        Bar::Reset();

        i = 0;
        j = 0;
        k.clear();
        l[0] = l[1] = l[2] = 0;
        m.clear();
        n.clear();

        o.Reset();
        p[0].Reset();
        p[1].Reset();
        p[2].Reset();

        q.clear();
        blob.clear();
    }

    float i = 124.5f;
    double j = 154.5;
    String k = "Woohoo!";
    int32_t l[3] = { 6, 7, 8 };
    TVector<uint64_t> m = { 9, 10, 11, 12, 13 };
    TVector<String> n = { "AAA", "BBB", "CCC" };

    Bar o;
    Bar p[3] = { Bar(), Bar(), Bar() };
    TInlineVector<Bar, 2> q = { Bar(), Bar() };
    Blob blob = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    StringID id;
};

//-------------------------------------------------------------------------

int main( int argc, char *argv[] )
{
    {
        EE::ApplicationGlobalState State;
        TypeSystem::TypeRegistry typeRegistry;
        AutoGenerated::Tools::RegisterTypes( typeRegistry );

        //-------------------------------------------------------------------------

        Vector v;
        v.SetX( 1 );
        v.SetY( 2 );
        v.SetZ( 3 );
        v.SetW( 4 );

        //String f( "SDA" );
        ResourceID f( "data://test.dat" );
        //Wah const f;
        /*THashMap<String, String> f;
        f.insert( TPair<String, String>( "1.", "A" ) );
        f.insert( TPair<String, String>( "2.", "B" ) );
        f.insert( TPair<String, String>( "3.", "C" ) );*/

        Serialization::BinaryOutputArchive out;
        out << f;
        out.WriteToFile( "D:\\test.srl" );

        std::cout << std::endl << std::endl;

        //String t;
        ResourceID t, t2;
        //THashMap<String, String> t;
        //Wah t;
        //t.Reset();

        Serialization::BinaryInputArchive in;
        in.ReadFromData( out.GetBinaryData(), out.GetBinaryDataSize() );
        in << t;

        Serialization::BinaryInputArchive in2;
        in2.ReadFromFile( "D:\\test.srl" );
        in2 << t2;

        //-------------------------------------------------------------------------

        AutoGenerated::Tools::UnregisterTypes( typeRegistry );
    }

    return 0;
}