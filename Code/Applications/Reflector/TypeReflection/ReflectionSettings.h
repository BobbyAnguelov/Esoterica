#pragma once
#include "Base/FileSystem/FileSystemPath.h"
#include <iostream>

//-------------------------------------------------------------------------

namespace EE::TypeSystem::Reflection
{
    namespace Settings
    {
        //-------------------------------------------------------------------------
        // Core engine settings
        //-------------------------------------------------------------------------

        constexpr static char const* const g_engineNamespace = "EE";
        constexpr static char const* const g_engineNamespacePlusDelimiter = "EE::";

        //-------------------------------------------------------------------------
        // Core folder structure settings
        //-------------------------------------------------------------------------

        constexpr static char const* const g_moduleDirectoryName = "_Module";
        constexpr static char const* const g_autogeneratedDirectoryName = "_AutoGenerated";
        constexpr static char const* const g_autogeneratedTypeInfoDirectoryName = "TypeInfo";
        constexpr static char const* const g_typeinfoFileSuffix = "typeinfo";
        constexpr static char const* const g_moduleAPIFilename = "API.h";
        constexpr static char const* const g_moduleFileSuffix = "Module.h";
        constexpr static char const* const g_typeRegistrationFileName = "TypeRegistration.h";

        constexpr static char const * const g_allowedProjectNames[] =
        {
            "Esoterica.Base",
            "Esoterica.Engine.Runtime",
            "Esoterica.Game.Runtime",
            "Esoterica.Engine.Tools",
            "Esoterica.Game.Tools",
        };

        static int32_t const g_numAllowedProjects = sizeof( g_allowedProjectNames ) / sizeof( g_allowedProjectNames[0] );

        //-------------------------------------------------------------------------
        // Core class and type names
        //-------------------------------------------------------------------------

        constexpr static char const* const g_toolsProjects[] =
        {
            "EngineTools",
            "GameTools"
        };

        constexpr static int const g_numToolsProjects = sizeof( g_toolsProjects ) / sizeof( g_toolsProjects[0] );
    }

    //-------------------------------------------------------------------------

    namespace Utils
    {
        bool PrintError( char const* pFormat, ... );

        void PrintWarning( char const* pFormat, ... );
    }
}