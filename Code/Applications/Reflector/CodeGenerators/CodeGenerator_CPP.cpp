#include "CodeGenerator_CPP.h"
#include "CodeGenerator_CPP_Type.h"
#include "CodeGenerator_CPP_Enum.h"
#include "Applications/Reflector/ReflectorSettingsAndUtils.h"
#include "System/TypeSystem/TypeID.h"
#include "System/FileSystem/FileSystemUtils.h"
#include "System/Utils/TopologicalSort.h"

#include <eastl/sort.h>
#include <fstream>
#include <string>

//-------------------------------------------------------------------------

namespace EE::CPP
{
    static bool SortTypesByDependencies( TVector<ReflectedType>& structureTypes )
    {
        int32_t const numTypes = (int32_t) structureTypes.size();
        if ( numTypes <= 1 )
        {
            return true;
        }

        // Create list to sort
        TVector<TopologicalSorter::Node > list;
        for ( auto i = 0; i < numTypes; i++ )
        {
            list.push_back( TopologicalSorter::Node( i ) );
        }

        for ( auto i = 0; i < numTypes; i++ )
        {
            for ( auto j = 0; j < numTypes; j++ )
            {
                if ( i != j && structureTypes[j].m_ID == structureTypes[i].m_parentID )
                {
                    list[i].m_children.push_back( &list[j] );
                }
            }
        }

        // Try to sort
        if ( !TopologicalSorter::Sort( list ) )
        {
            return false;
        }

        // Update type list
        TVector<ReflectedType> sortedTypes;
        sortedTypes.reserve( numTypes );

        for ( auto& node : list )
        {
            sortedTypes.push_back( structureTypes[node.m_ID] );
        }
        structureTypes.swap( sortedTypes );

        return true;
    }

    enum class TypeRegistrationHeaderType
    {
        Engine,
        Tools
    };

    static bool GenerateTypeRegistrationHeaderFiles( ReflectionDatabase const& database, SolutionInfo const& solution, std::stringstream& typeRegistrationStr, TypeRegistrationHeaderType headerType )
    {
        typeRegistrationStr.str( std::string() );
        typeRegistrationStr.clear();
        typeRegistrationStr << "//-------------------------------------------------------------------------\n";
        typeRegistrationStr << "// This is an auto-generated file - DO NOT edit\n";
        typeRegistrationStr << "//-------------------------------------------------------------------------\n\n";
        typeRegistrationStr << "#include \"System/TypeSystem/TypeRegistry.h\"\n\n";
        typeRegistrationStr << "#include \"System/TypeSystem/EnumInfo.h\"\n\n";

        // Get all modules from database
        TVector<ProjectInfo> modules = database.GetAllRegisteredProjects();
        TVector<ReflectedResourceType> const& registeredResourceTypes = database.GetAllRegisteredResourceTypes();

        // Module includes
        //-------------------------------------------------------------------------

        for ( auto i = 0; i < modules.size(); i++ )
        {
            // Ignore tools modules for engine headers
            if ( headerType == TypeRegistrationHeaderType::Engine )
            {
                if ( modules[i].m_isToolsModule )
                {
                    modules.erase_unsorted( modules.begin() + i );
                    i--;
                    continue;
                }
            }

            // Ignore module-less modules
            if ( !modules[i].m_moduleHeaderID.IsValid() )
            {
                modules.erase_unsorted( modules.begin() + i );
                i--;
                continue;
            }


            // Output module include
            HeaderInfo const* pHeader = database.GetHeaderDesc( modules[i].m_moduleHeaderID );
            if ( pHeader != nullptr )
            {
                typeRegistrationStr << "#include \"" << pHeader->m_filePath.c_str() << "\"\n";
            }
            else
            {
                return false;
            }
        }
        typeRegistrationStr << "\n";

        // Sort modules according to original project dependency order
        //-------------------------------------------------------------------------

        auto sortPredicate = [] ( ProjectInfo const& pA, ProjectInfo const& pB )
        {
            return pA.m_dependencyCount < pB.m_dependencyCount;
        };

        eastl::sort( modules.begin(), modules.end(), sortPredicate );

        typeRegistrationStr << "namespace EE\n";
        typeRegistrationStr << "{\n";
        typeRegistrationStr << "    namespace AutoGenerated";

        if ( headerType == TypeRegistrationHeaderType::Engine )
        {
            typeRegistrationStr << "::Engine\n";
        }
        else
        {
            typeRegistrationStr << "::Tools\n";
        }

        typeRegistrationStr << "    {\n";

        // Registration function
        //-------------------------------------------------------------------------

        typeRegistrationStr << "        inline void RegisterTypes( TypeSystem::TypeRegistry& typeRegistry )\n";
        typeRegistrationStr << "        {\n";

        for ( auto& module : modules )
        {
            typeRegistrationStr << "            " << module.m_moduleClassName.c_str() << "::RegisterTypes( typeRegistry );\n";
        }

        typeRegistrationStr << "\n";

        if ( !registeredResourceTypes.empty() )
        {
            typeRegistrationStr << "            TypeSystem::ResourceInfo resourceInfo;\n";
        }

        auto GetResourceTypeIDForTypeID = [&registeredResourceTypes] ( TypeID typeID )
        {
            for ( auto const& registeredResourceType : registeredResourceTypes )
            {
                if ( registeredResourceType.m_typeID == typeID )
                {
                    return registeredResourceType.m_resourceTypeID;
                }
            }

            EE_UNREACHABLE_CODE();
            return ResourceTypeID();
        };

        for ( auto& registeredResourceType : registeredResourceTypes )
        {
            typeRegistrationStr << "\n";
            typeRegistrationStr << "            resourceInfo.m_typeID = TypeSystem::TypeID( \"" << registeredResourceType.m_typeID.c_str() << "\");\n";
            typeRegistrationStr << "            resourceInfo.m_resourceTypeID = ResourceTypeID( \"" << registeredResourceType.m_resourceTypeID.ToString().c_str() << "\" );\n";
            typeRegistrationStr << "            resourceInfo.m_parentTypes.clear();\n";

            for ( auto const& parentType : registeredResourceType.m_parents )
            {
                ResourceTypeID const resourceTypeID = GetResourceTypeIDForTypeID( parentType );
                typeRegistrationStr << "            resourceInfo.m_parentTypes.emplace_back( ResourceTypeID( \"" << resourceTypeID.ToString().c_str() << "\" ) );\n";
            }

            typeRegistrationStr << "            #if EE_DEVELOPMENT_TOOLS\n";
            typeRegistrationStr << "            resourceInfo.m_friendlyName = \"" << registeredResourceType.m_friendlyName.c_str() << "\";\n";
            typeRegistrationStr << "            #endif\n";

            typeRegistrationStr << "            typeRegistry.RegisterResourceTypeID( resourceInfo );\n";
        }

        typeRegistrationStr << "        }\n\n";

        // Unregistration function
        //-------------------------------------------------------------------------

        typeRegistrationStr << "        inline void UnregisterTypes( TypeSystem::TypeRegistry& typeRegistry )\n";
        typeRegistrationStr << "        {\n";

        for ( auto iter = modules.rbegin(); iter != modules.rend(); ++iter )
        {
            typeRegistrationStr << "            " << iter->m_moduleClassName.c_str() << "::UnregisterTypes( typeRegistry );\n";
        }

        typeRegistrationStr << "\n";

        for ( auto iter = registeredResourceTypes.rbegin(); iter != registeredResourceTypes.rend(); ++iter )
        {
            typeRegistrationStr << "            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( \"" << iter->m_typeID.c_str() << "\" ) );\n";
        }

        typeRegistrationStr << "        }\n";
        typeRegistrationStr << "    }\n";
        typeRegistrationStr << "}\n";

        return true;
    }

    //-------------------------------------------------------------------------

    bool Generator::SaveStreamToFile( FileSystem::Path const& filePath, std::stringstream& stream )
    {
        bool fileContentsEqual = true;

        // Rewind stream to beginning
        stream.seekg( std::ios::beg );

        // Open existing file and compare contents to the newly generated stream
        std::ifstream existingFile( filePath.c_str(), std::ios::in );
        if ( existingFile.is_open() )
        {
            std::string lineNew, lineExisting;
            while ( getline( existingFile, lineExisting ) && fileContentsEqual )
            {
                if ( !getline( stream, lineNew ) || ( lineExisting != lineNew ) )
                {
                    fileContentsEqual = false;
                }
            }

            // Set different if the stream is longer than the file
            if ( fileContentsEqual && getline( stream, lineNew ) )
            {
                fileContentsEqual = false;
            }

            existingFile.close();
        }
        else
        {
            // std::cout << "Error opening existing file: " << strerror( errno );
            fileContentsEqual = false;
        }

        // If the contents differ overwrite the existing file
        if ( !fileContentsEqual )
        {
            std::fstream outputFile( filePath.c_str(), std::ios::out | std::ios::trunc );
            if ( !outputFile.is_open() )
            {
                return false;
            }

            stream.seekg( std::ios::beg );
            outputFile << stream.rdbuf();
            outputFile.close();
        }

        return true;
    }

    void Generator::GenerateTypeInfoFileHeader( HeaderInfo const& hdr )
    {
        m_typeInfoFile.str( std::string() );
        m_typeInfoFile.clear();
        m_typeInfoFile << "#pragma once\n\n";
        m_typeInfoFile << "//*************************************************************************\n";
        m_typeInfoFile << "// This is an auto-generated file - DO NOT edit\n";
        m_typeInfoFile << "//*************************************************************************\n\n";
        m_typeInfoFile << "#include \"" << hdr.m_filePath.c_str() << "\"\n";
    }

    void Generator::GenerateModuleCodeFile( ProjectInfo const& prj, TVector<ReflectedType> const& typesInModule )
    {
        //-------------------------------------------------------------------------
        // Header

        m_moduleFile.str( std::string() );
        m_moduleFile.clear();
        m_moduleFile << "//-------------------------------------------------------------------------\n";
        m_moduleFile << "// This is an auto-generated file - DO NOT edit\n";
        m_moduleFile << "//-------------------------------------------------------------------------\n\n";
        m_moduleFile << "#include \"../API.h\"\n";
        m_moduleFile << "#include \"System/TypeSystem/TypeRegistry.h\"\n";
        m_moduleFile << "#include \"System/TypeSystem/EnumInfo.h\"\n";
        m_moduleFile << "#include \"System/Resource/ResourceSystem.h\"\n";
        m_moduleFile << "#include \"" << prj.GetModuleHeaderDesc().m_filePath.c_str() << "\"\n\n";
        m_moduleFile << "//-------------------------------------------------------------------------\n\n";

        //-------------------------------------------------------------------------
        // Includes

        TVector<FileSystem::Path> autoGeneratedFiles;
        String const autoGeneratedDirectory = prj.m_path + Reflection::Settings::g_autogeneratedDirectory;
        FileSystem::GetDirectoryContents( autoGeneratedDirectory, autoGeneratedFiles, FileSystem::DirectoryReaderOutput::OnlyFiles, FileSystem::DirectoryReaderMode::DontExpand, { "cpp" } );

        for ( auto& file : autoGeneratedFiles )
        {
            if ( !file.IsFilenameEqual( Reflection::Settings::g_autogeneratedModuleFile ) )
            {
                m_moduleFile << "#include \"" << file << "\"\n";
            }
        }

        //-------------------------------------------------------------------------
        // Registration functions

        m_moduleFile << "\n//-------------------------------------------------------------------------\n\n";
        m_moduleFile << "void " << prj.m_moduleClassName.c_str() << "::RegisterTypes( TypeSystem::TypeRegistry& typeRegistry )\n{\n";

        for ( auto& type : typesInModule )
        {
            if ( type.m_isDevOnly )
            {
                m_moduleFile << "\n    #if EE_DEVELOPMENT_TOOLS\n";
            }

            m_moduleFile << "    TypeSystem::TTypeInfo<" << type.m_namespace.c_str() << type.m_name.c_str() << ">::RegisterType( typeRegistry );\n";

            if ( type.m_isDevOnly )
            {
                m_moduleFile << "    #endif\n\n";
            }
        }

        m_moduleFile << "}\n\n";
        m_moduleFile << "void " << prj.m_moduleClassName.c_str() << "::UnregisterTypes( TypeSystem::TypeRegistry& typeRegistry )\n{\n";

        for ( auto iter = typesInModule.rbegin(); iter != typesInModule.rend(); ++iter )
        {
            if ( iter->m_isDevOnly )
            {
                m_moduleFile << "\n    #if EE_DEVELOPMENT_TOOLS\n";
            }

            m_moduleFile << "    TypeSystem::TTypeInfo<" << iter->m_namespace.c_str() << iter->m_name.c_str() << ">::UnregisterType( typeRegistry );\n";

            if ( iter->m_isDevOnly )
            {
                m_moduleFile << "    #endif\n\n";
            }
        }

        m_moduleFile << "}\n\n";
    }

    //-------------------------------------------------------------------------
    // Generator
    //-------------------------------------------------------------------------

    bool Generator::LogError( char const* pErrorFormat, ... ) const
    {
        char buffer[256];

        va_list args;
        va_start( args, pErrorFormat );
        VPrintf( buffer, 256, pErrorFormat, args );
        va_end( args );

        m_errorMessage.assign( buffer );
        return false;
    }

    bool Generator::Generate( ReflectionDatabase const& database, SolutionInfo const& solution )
    {
        m_pDatabase = &database;
        for ( auto& prj : solution.m_projects )
        {
            // Ignore module less projects
            if ( !prj.m_moduleHeaderID.IsValid() )
            {
                continue;
            }

            // Ensure the auto generated directory exists
            FileSystem::Path const autoGeneratedDirectory = ( prj.m_path + Reflection::Settings::g_autogeneratedDirectory );
            autoGeneratedDirectory.EnsureDirectoryExists();

            // Generate list of all expected header files in the auto generated directory
            TVector<FileSystem::Path> expectedFiles;
            expectedFiles.push_back( FileSystem::Path( autoGeneratedDirectory + Reflection::Settings::g_autogeneratedModuleFile ) );

            for ( auto const& headerInfo : prj.m_headerFiles )
            {
                expectedFiles.push_back( headerInfo.GetAutogeneratedTypeInfoFileName( autoGeneratedDirectory ) );
            }

            // Delete any unknown files from the auto generated directory
            TVector<FileSystem::Path> files;
            FileSystem::GetDirectoryContents( autoGeneratedDirectory, files, FileSystem::DirectoryReaderOutput::OnlyFiles );
            for ( auto const& file : files )
            {
                if ( VectorFind( expectedFiles, file ) == expectedFiles.end() )
                {
                    FileSystem::EraseFile( file );
                }
            }

            // Generate code files for the dirty headers
            for ( auto& dirtyHeaderIdx : prj.m_dirtyHeaders )
            {
                auto& headerInfo = prj.m_headerFiles[dirtyHeaderIdx];

                if ( headerInfo.m_ID == prj.m_moduleHeaderID )
                {
                    continue;
                }

                String const typeInfoFilename = headerInfo.GetAutogeneratedTypeInfoFileName( autoGeneratedDirectory );

                // Generate files
                GenerateTypeInfoFileHeader( headerInfo );

                // Get all types for the header
                TVector<ReflectedType> typesInHeader;
                m_pDatabase->GetAllTypesForHeader( headerInfo.m_ID, typesInHeader );

                for ( auto& type : typesInHeader )
                {
                    // Generate enum info
                    if ( type.IsEnum() )
                    {
                        EnumGenerator::Generate( m_typeInfoFile, prj.m_exportMacro, type );
                    }
                    else // Generate type info
                    {
                        if ( !type.m_parentID.IsValid() )
                        {
                            String const fullTypeName = type.m_namespace + type.m_name;
                            return LogError( "Invalid parent hierarchy for type (%s), all registered types must derived from a registered type.", fullTypeName.c_str() );
                        }

                        auto pTypeDesc = m_pDatabase->GetType( type.m_parentID );
                        EE_ASSERT( pTypeDesc != nullptr );

                        TypeGenerator::Generate( database, m_typeInfoFile, prj.m_exportMacro, type, *pTypeDesc );
                    }
                }

                // Save generated file
                if ( !SaveStreamToFile( typeInfoFilename, m_typeInfoFile ) )
                {
                    return LogError( "Could not save typeinfo file to disk: %s", typeInfoFilename.c_str() );
                }
            }

            // Get project info from database as that will contain all necessary info like module class name
            ProjectInfo const* pProjectDesc = m_pDatabase->GetProjectDesc( prj.m_ID );
            if ( pProjectDesc == nullptr )
            {
                return LogError( "Could not retrieve description for project: %s", prj.m_name.c_str() );
            }
            EE_ASSERT( prj.m_ID == pProjectDesc->m_ID );

            // Get all types in project
            TVector<ReflectedType> typesInProject;
            m_pDatabase->GetAllTypesForProject( pProjectDesc->m_ID, typesInProject );
            if ( !SortTypesByDependencies( typesInProject ) )
            {
                return LogError( "Cyclic header dependency detected in project: %s", pProjectDesc->m_name.c_str() );
            }

            // Generate and save the module file
            GenerateModuleCodeFile( *pProjectDesc, typesInProject );
            String const module_cpp = autoGeneratedDirectory + Reflection::Settings::g_autogeneratedModuleFile;
            if ( !SaveStreamToFile( module_cpp, m_moduleFile ) )
            {
                return LogError( "Could not save module file to disk: %s", module_cpp.c_str() );
            }
        }

        // Generate and save module type registration header
        //-------------------------------------------------------------------------

        if ( !GenerateTypeRegistrationHeaderFiles( database, solution, m_engineTypeRegistrationFile, TypeRegistrationHeaderType::Engine ) )
        {
            return LogError( "Could not generate engine type registration header!" );
        }

        if ( !GenerateTypeRegistrationHeaderFiles( database, solution, m_toolsTypeRegistrationFile, TypeRegistrationHeaderType::Tools ) )
        {
            return LogError( "Could not generate tools type registration header!" );
        }

        //-------------------------------------------------------------------------

        FileSystem::Path const autoGeneratedPath = solution.m_path + Reflection::Settings::g_globalAutoGeneratedDirectory;
        FileSystem::Path const engineTypeRegistration_h = autoGeneratedPath + Reflection::Settings::g_engineTypeRegistrationHeaderPath;
        FileSystem::Path const toolsTypeRegistration_h = autoGeneratedPath + Reflection::Settings::g_toolsTypeRegistrationHeaderPath;

        autoGeneratedPath.EnsureDirectoryExists();
        if ( !SaveStreamToFile( engineTypeRegistration_h, m_engineTypeRegistrationFile ) )
        {
            return LogError( "Could not save type registration header to disk: %s", engineTypeRegistration_h.c_str() );
        }

        autoGeneratedPath.EnsureDirectoryExists();
        if ( !SaveStreamToFile( toolsTypeRegistration_h, m_toolsTypeRegistrationFile ) )
        {
            return LogError( "Could not save type registration header to disk: %s", toolsTypeRegistration_h.c_str() );
        }

        return true;
    }
}